name: Deploy to ECR

on: 
  push:
    branches: [ main ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: jg-asg1-ecr
        IMAGE_TAG: 1.0
        # IMAGE_TAG: ${{ github.run_number }}
      run: |
        ls -ltra

        # Docker build command
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:jg_app-v$IMAGE_TAG -f Dockerfile .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:jg_db-v$IMAGE_TAG -f Dockerfile_mysql .
        # docker build -t jg_db -f Dockerfile_mysql .
        # docker build -t jg_app -f Dockerfile .

        # Create network
        # docker network create -d bridge --subnet 172.18.0.0/24 --gateway 172.18.0.1 my_network
        # export DBPWD=${{ secrets.DB_PWD }}
        export ECR=$ECR_REGISTRY/$ECR_REPOSITORY

        # Deploy database
        # docker run -d --name jg_db -e MYSQL_ROOT_PASSWORD=wordpass  $ECR:jg_db-v$IMAGE_TAG
        docker run -d --name jg_db -e MYSQL_ROOT_PASSWORD=wordpass $ECR:jg_db-v$IMAGE_TAG
        sleep 20

        # # Setup env variables
        # export DBHOST=$(docker inspect -f '{{.NetworkSettings.Networks.my_network.IPAddress}}' jg_db)
        docker inspect jg_db
        echo $ECR_REGISTRY
        sleep 10

        export DBHOST=172.17.0.2
        export DBPORT=3306
        export DATABASE=employees
        export DBNAME=Employees
        export DBUSER=root
        export APP_COLOR=blue


        # Deploy app when database is ready
        # docker run -d --name jg_app -p 8080:8080 -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e  DBUSER=$DBUSER -e DBPWD=$DBPWD -e APP_COLOR="blue" $ECR:jg_app-v$IMAGE_TAG
        docker run --name jg_app -p 8080:8080 -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD -e APP_COLOR="blue" -dt $ECR:jg_app-v$IMAGE_TAG
        
        docker ps
        docker images
        echo "Pause for 10 seconds to ensure container is deployed"
        sleep 10

        # Test if app is functioning
        # netstat -ln | grep 8080
        # sudo netstat -tulpn
        # sleep 5
        # curl 172.17.0.2:8080 -vvv
        # curl 127.0.0.1:8080 -vvv
        # curl localhost:8080 -vvv

        # Push images when successful
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:jg_app-v$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:jg_db-v$IMAGE_TAG
        # docker push jg_db
        # docker push jg_app
